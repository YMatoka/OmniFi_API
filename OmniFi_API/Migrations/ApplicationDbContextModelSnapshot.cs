// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OmniFi_API.Data;

#nullable disable

namespace OmniFi_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.AssetPlatform", b =>
                {
                    b.Property<int>("AssetPlatformID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetPlatformID"));

                    b.Property<int?>("BankID")
                        .HasColumnType("int");

                    b.Property<int?>("CryptoExchangeID")
                        .HasColumnType("int");

                    b.HasKey("AssetPlatformID");

                    b.HasIndex("BankID")
                        .IsUnique()
                        .HasFilter("[BankID] IS NOT NULL");

                    b.HasIndex("CryptoExchangeID")
                        .IsUnique()
                        .HasFilter("[CryptoExchangeID] IS NOT NULL");

                    b.ToTable("AssetPlatforms");

                    b.HasData(
                        new
                        {
                            AssetPlatformID = 1,
                            BankID = 1
                        },
                        new
                        {
                            AssetPlatformID = 2,
                            CryptoExchangeID = 1
                        },
                        new
                        {
                            AssetPlatformID = 3,
                            CryptoExchangeID = 2
                        },
                        new
                        {
                            AssetPlatformID = 4,
                            CryptoExchangeID = 3
                        });
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.AssetSource", b =>
                {
                    b.Property<int>("AssetSourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssetSourceID"));

                    b.Property<string>("AssetSourceName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AssetSourceID");

                    b.ToTable("AssetSources");

                    b.HasData(
                        new
                        {
                            AssetSourceID = 1,
                            AssetSourceName = "CheckingAccount"
                        },
                        new
                        {
                            AssetSourceID = 2,
                            AssetSourceName = "SavingAccount"
                        },
                        new
                        {
                            AssetSourceID = 3,
                            AssetSourceName = "ShareAccount"
                        },
                        new
                        {
                            AssetSourceID = 4,
                            AssetSourceName = "CryptoHolding"
                        });
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.FinancialAsset", b =>
                {
                    b.Property<int>("FinancialEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialEntityId"));

                    b.Property<int>("AssetPlatformID")
                        .HasColumnType("int");

                    b.Property<int>("AssetSourceID")
                        .HasColumnType("int");

                    b.Property<int>("FiatCurrencyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FirstRetrievedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Value")
                        .HasPrecision(21, 2)
                        .HasColumnType("decimal(21,2)");

                    b.HasKey("FinancialEntityId");

                    b.HasIndex("AssetPlatformID");

                    b.HasIndex("AssetSourceID");

                    b.HasIndex("FiatCurrencyID");

                    b.HasIndex("UserID");

                    b.ToTable("FinancialAssets");
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.FinancialAssetHistory", b =>
                {
                    b.Property<int>("FinancialEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialEntityId"));

                    b.Property<int>("AssetPlatformID")
                        .HasColumnType("int");

                    b.Property<int>("AssetSourceID")
                        .HasColumnType("int");

                    b.Property<int>("FiatCurrencyID")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Value")
                        .HasPrecision(21, 2)
                        .HasColumnType("decimal(21,2)");

                    b.HasKey("FinancialEntityId");

                    b.HasIndex("AssetPlatformID");

                    b.HasIndex("AssetSourceID");

                    b.HasIndex("FiatCurrencyID");

                    b.HasIndex("FinancialAssetId");

                    b.HasIndex("UserID");

                    b.ToTable("FinancialAssetsHistory");
                });

            modelBuilder.Entity("OmniFi_API.Models.Banks.Bank", b =>
                {
                    b.Property<int>("BankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankID"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("BankID");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            BankID = 1,
                            BankName = "BoursoBank",
                            ImageUrl = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 117, 112, 108, 111, 97, 100, 46, 119, 105, 107, 105, 109, 101, 100, 105, 97, 46, 111, 114, 103, 47, 119, 105, 107, 105, 112, 101, 100, 105, 97, 47, 102, 114, 47, 116, 104, 117, 109, 98, 47, 51, 47, 51, 100, 47, 76, 111, 103, 111, 45, 98, 111, 117, 114, 115, 111, 114, 97, 109, 97, 45, 98, 97, 110, 113, 117, 101, 46, 115, 118, 103, 47, 49, 48, 50, 52, 112, 120, 45, 76, 111, 103, 111, 45, 98, 111, 117, 114, 115, 111, 114, 97, 109, 97, 45, 98, 97, 110, 113, 117, 101, 46, 115, 118, 103, 46, 112, 110, 103 }
                        });
                });

            modelBuilder.Entity("OmniFi_API.Models.Banks.BankAccount", b =>
                {
                    b.Property<int>("BankAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankAccountID"));

                    b.Property<int>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BankAccountID");

                    b.HasIndex("BankID");

                    b.HasIndex("UserID");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("OmniFi_API.Models.Banks.BankCredential", b =>
                {
                    b.Property<int>("BankCredientialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankCredientialID"));

                    b.Property<int>("BankAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("BankID")
                        .HasColumnType("int");

                    b.Property<int>("BankUserID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("BankCredientialID");

                    b.HasIndex("BankAccountID")
                        .IsUnique();

                    b.HasIndex("BankID");

                    b.ToTable("BankCredentials");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoApiCredential", b =>
                {
                    b.Property<int>("CryptoApiCredentialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CryptoApiCredentialID"));

                    b.Property<byte[]>("ApiKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ApiSecret")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("CryptoExchangeAccountID")
                        .HasColumnType("int");

                    b.Property<int?>("CryptoExchangeID")
                        .HasColumnType("int");

                    b.HasKey("CryptoApiCredentialID");

                    b.HasIndex("CryptoExchangeAccountID")
                        .IsUnique();

                    b.HasIndex("CryptoExchangeID");

                    b.ToTable("CryptoApiCredentials");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoCurrency", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyID"));

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("CurrencyID");

                    b.ToTable("CryptoCurrencies");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoExchange", b =>
                {
                    b.Property<int>("CryptoExchangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CryptoExchangeID"));

                    b.Property<string>("ExchangeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CryptoExchangeID");

                    b.ToTable("CryptoExchanges");

                    b.HasData(
                        new
                        {
                            CryptoExchangeID = 1,
                            ExchangeName = "Binance",
                            ImageUrl = "https://w7.pngwing.com/pngs/696/485/png-transparent-binance-logo-cryptocurrency-exchange-coin-text-logo-computer-wallpaper.png"
                        },
                        new
                        {
                            CryptoExchangeID = 2,
                            ExchangeName = "Crypto.Com",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Cryptos.com_logo.svg/2560px-Cryptos.com_logo.svg.png"
                        },
                        new
                        {
                            CryptoExchangeID = 3,
                            ExchangeName = "Kraken",
                            ImageUrl = "https://logo-marque.com/wp-content/uploads/2021/03/Kraken-Logo.png"
                        });
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoExchangeAccount", b =>
                {
                    b.Property<int>("ExchangeAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExchangeAccountID"));

                    b.Property<int>("CryptoExchangeID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ExchangeAccountID");

                    b.HasIndex("CryptoExchangeID");

                    b.HasIndex("UserID");

                    b.ToTable("CryptoExchangeAccounts");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoHolding", b =>
                {
                    b.Property<int>("CryptoHoldingEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CryptoHoldingEntityId"));

                    b.Property<int>("CryptoCurrencId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAssetID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(27, 18)
                        .HasColumnType("decimal(27,18)");

                    b.HasKey("CryptoHoldingEntityId");

                    b.HasIndex("CryptoCurrencId");

                    b.HasIndex("FinancialAssetID")
                        .IsUnique();

                    b.ToTable("CryptoHoldings");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoHoldingHistory", b =>
                {
                    b.Property<int>("CryptoHoldingEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CryptoHoldingEntityId"));

                    b.Property<int>("CryptoCurrencId")
                        .HasColumnType("int");

                    b.Property<int>("CryptoHoldingId")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAssetHistoryID")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(27, 18)
                        .HasColumnType("decimal(27,18)");

                    b.HasKey("CryptoHoldingEntityId");

                    b.HasIndex("CryptoCurrencId");

                    b.HasIndex("CryptoHoldingId");

                    b.HasIndex("FinancialAssetHistoryID")
                        .IsUnique();

                    b.ToTable("CryptoHoldingsHystory");
                });

            modelBuilder.Entity("OmniFi_API.Models.Currencies.FiatCurrency", b =>
                {
                    b.Property<int>("FiatCurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FiatCurrencyID"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("FiatCurrencyID");

                    b.ToTable("FiatCurrencies");

                    b.HasData(
                        new
                        {
                            FiatCurrencyID = 1,
                            CurrencyCode = "USD",
                            CurrencyName = "United States Dollar",
                            CurrencySymbol = "$"
                        },
                        new
                        {
                            FiatCurrencyID = 2,
                            CurrencyCode = "EUR",
                            CurrencyName = "Euro",
                            CurrencySymbol = "€"
                        },
                        new
                        {
                            FiatCurrencyID = 3,
                            CurrencyCode = "GBP",
                            CurrencyName = "British Pound",
                            CurrencySymbol = "£"
                        },
                        new
                        {
                            FiatCurrencyID = 4,
                            CurrencyCode = "CHF",
                            CurrencyName = "Swiss Franc",
                            CurrencySymbol = "₣"
                        },
                        new
                        {
                            FiatCurrencyID = 5,
                            CurrencyCode = "JPY",
                            CurrencyName = "Japanese Yen",
                            CurrencySymbol = "¥"
                        });
                });

            modelBuilder.Entity("OmniFi_API.Models.Encryption.AesIV", b =>
                {
                    b.Property<int>("AesIVId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AesIVId"));

                    b.Property<int?>("BankCredentialId")
                        .HasColumnType("int");

                    b.Property<int?>("CryptoApiCredentialId")
                        .HasColumnType("int");

                    b.Property<byte[]>("IV")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("AesIVId");

                    b.HasIndex("BankCredentialId")
                        .IsUnique()
                        .HasFilter("[BankCredentialId] IS NOT NULL");

                    b.HasIndex("CryptoApiCredentialId")
                        .IsUnique()
                        .HasFilter("[CryptoApiCredentialId] IS NOT NULL");

                    b.ToTable("AesIV");
                });

            modelBuilder.Entity("OmniFi_API.Models.Encryption.AesKey", b =>
                {
                    b.Property<int>("AesKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AesKeyId"));

                    b.Property<int?>("BankCredentialId")
                        .HasColumnType("int");

                    b.Property<int?>("CryptoApiCredentialId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Key")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("AesKeyId");

                    b.HasIndex("BankCredentialId")
                        .IsUnique()
                        .HasFilter("[BankCredentialId] IS NOT NULL");

                    b.HasIndex("CryptoApiCredentialId")
                        .IsUnique()
                        .HasFilter("[CryptoApiCredentialId] IS NOT NULL");

                    b.ToTable("AesKeys");
                });

            modelBuilder.Entity("OmniFi_API.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e1f8f0f8-4e98-4d30-abf8-8488705defe3",
                            ConcurrencyStamp = "c833d87b-30cd-4cc0-aa19-9eb5cc2c4b13",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ea1104de-92d7-499a-a2eb-0f707e6bb911",
                            ConcurrencyStamp = "bbaf7e3d-5d38-4372-bddf-beed77f83baf",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("OmniFi_API.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SelectedFiatCurrencyID")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SelectedFiatCurrencyID");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OmniFi_API.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OmniFi_API.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OmniFi_API.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OmniFi_API.Models.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OmniFi_API.Models.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.AssetPlatform", b =>
                {
                    b.HasOne("OmniFi_API.Models.Banks.Bank", "Bank")
                        .WithOne("AssetPlatform")
                        .HasForeignKey("OmniFi_API.Models.Assets.AssetPlatform", "BankID");

                    b.HasOne("OmniFi_API.Models.Cryptos.CryptoExchange", "CryptoExchange")
                        .WithOne("AssetPlatform")
                        .HasForeignKey("OmniFi_API.Models.Assets.AssetPlatform", "CryptoExchangeID");

                    b.Navigation("Bank");

                    b.Navigation("CryptoExchange");
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.FinancialAsset", b =>
                {
                    b.HasOne("OmniFi_API.Models.Assets.AssetPlatform", "AssetPlatform")
                        .WithMany("FinancialAssets")
                        .HasForeignKey("AssetPlatformID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Assets.AssetSource", "AssetSource")
                        .WithMany("FinancialAssets")
                        .HasForeignKey("AssetSourceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Currencies.FiatCurrency", "FiatCurrency")
                        .WithMany("FinancialAssets")
                        .HasForeignKey("FiatCurrencyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Identity.ApplicationUser", "User")
                        .WithMany("FinancialAssets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetPlatform");

                    b.Navigation("AssetSource");

                    b.Navigation("FiatCurrency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.FinancialAssetHistory", b =>
                {
                    b.HasOne("OmniFi_API.Models.Assets.AssetPlatform", "AssetPlatform")
                        .WithMany("FinancialAssetsHistory")
                        .HasForeignKey("AssetPlatformID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Assets.AssetSource", "AssetSource")
                        .WithMany("FinancialAssetsHistory")
                        .HasForeignKey("AssetSourceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Currencies.FiatCurrency", "FiatCurrency")
                        .WithMany("FinancialAssetsHistory")
                        .HasForeignKey("FiatCurrencyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Assets.FinancialAsset", "FinancialAsset")
                        .WithMany("FinancialAssetsHistory")
                        .HasForeignKey("FinancialAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Identity.ApplicationUser", "User")
                        .WithMany("FinancialAssetsHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetPlatform");

                    b.Navigation("AssetSource");

                    b.Navigation("FiatCurrency");

                    b.Navigation("FinancialAsset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmniFi_API.Models.Banks.BankAccount", b =>
                {
                    b.HasOne("OmniFi_API.Models.Banks.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Identity.ApplicationUser", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmniFi_API.Models.Banks.BankCredential", b =>
                {
                    b.HasOne("OmniFi_API.Models.Banks.BankAccount", "BankAccount")
                        .WithOne("BankCredential")
                        .HasForeignKey("OmniFi_API.Models.Banks.BankCredential", "BankAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Banks.Bank", null)
                        .WithMany("BankCredentials")
                        .HasForeignKey("BankID");

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoApiCredential", b =>
                {
                    b.HasOne("OmniFi_API.Models.Cryptos.CryptoExchangeAccount", "CryptoExchangeAccount")
                        .WithOne("CryptoApiCredential")
                        .HasForeignKey("OmniFi_API.Models.Cryptos.CryptoApiCredential", "CryptoExchangeAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Cryptos.CryptoExchange", null)
                        .WithMany("ApiCredentials")
                        .HasForeignKey("CryptoExchangeID");

                    b.Navigation("CryptoExchangeAccount");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoExchangeAccount", b =>
                {
                    b.HasOne("OmniFi_API.Models.Cryptos.CryptoExchange", "CryptoExchange")
                        .WithMany("cryptoExchangeAccounts")
                        .HasForeignKey("CryptoExchangeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Identity.ApplicationUser", "User")
                        .WithMany("CryptoExchangeAccounts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoExchange");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoHolding", b =>
                {
                    b.HasOne("OmniFi_API.Models.Cryptos.CryptoCurrency", "CryptoCurrency")
                        .WithMany("CryptoHoldings")
                        .HasForeignKey("CryptoCurrencId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Assets.FinancialAsset", "FinancialAsset")
                        .WithOne("CryptoHolding")
                        .HasForeignKey("OmniFi_API.Models.Cryptos.CryptoHolding", "FinancialAssetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoCurrency");

                    b.Navigation("FinancialAsset");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoHoldingHistory", b =>
                {
                    b.HasOne("OmniFi_API.Models.Cryptos.CryptoCurrency", "CryptoCurrency")
                        .WithMany("CryptoHoldingsHistory")
                        .HasForeignKey("CryptoCurrencId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Cryptos.CryptoHolding", "CryptoHolding")
                        .WithMany("CryptoHoldingsHistory")
                        .HasForeignKey("CryptoHoldingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OmniFi_API.Models.Assets.FinancialAssetHistory", "FinancialAssetHistory")
                        .WithOne("CryptoHoldingHistory")
                        .HasForeignKey("OmniFi_API.Models.Cryptos.CryptoHoldingHistory", "FinancialAssetHistoryID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CryptoCurrency");

                    b.Navigation("CryptoHolding");

                    b.Navigation("FinancialAssetHistory");
                });

            modelBuilder.Entity("OmniFi_API.Models.Encryption.AesIV", b =>
                {
                    b.HasOne("OmniFi_API.Models.Banks.BankCredential", "BankCredential")
                        .WithOne("AesIV")
                        .HasForeignKey("OmniFi_API.Models.Encryption.AesIV", "BankCredentialId");

                    b.HasOne("OmniFi_API.Models.Cryptos.CryptoApiCredential", "CryptoApiCredential")
                        .WithOne("AesIV")
                        .HasForeignKey("OmniFi_API.Models.Encryption.AesIV", "CryptoApiCredentialId");

                    b.Navigation("BankCredential");

                    b.Navigation("CryptoApiCredential");
                });

            modelBuilder.Entity("OmniFi_API.Models.Encryption.AesKey", b =>
                {
                    b.HasOne("OmniFi_API.Models.Banks.BankCredential", "BankCredential")
                        .WithOne("AesKey")
                        .HasForeignKey("OmniFi_API.Models.Encryption.AesKey", "BankCredentialId");

                    b.HasOne("OmniFi_API.Models.Cryptos.CryptoApiCredential", "CryptoApiCredential")
                        .WithOne("AesKey")
                        .HasForeignKey("OmniFi_API.Models.Encryption.AesKey", "CryptoApiCredentialId");

                    b.Navigation("BankCredential");

                    b.Navigation("CryptoApiCredential");
                });

            modelBuilder.Entity("OmniFi_API.Models.Identity.ApplicationUser", b =>
                {
                    b.HasOne("OmniFi_API.Models.Currencies.FiatCurrency", "FiatCurrency")
                        .WithMany("Users")
                        .HasForeignKey("SelectedFiatCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FiatCurrency");
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.AssetPlatform", b =>
                {
                    b.Navigation("FinancialAssets");

                    b.Navigation("FinancialAssetsHistory");
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.AssetSource", b =>
                {
                    b.Navigation("FinancialAssets");

                    b.Navigation("FinancialAssetsHistory");
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.FinancialAsset", b =>
                {
                    b.Navigation("CryptoHolding");

                    b.Navigation("FinancialAssetsHistory");
                });

            modelBuilder.Entity("OmniFi_API.Models.Assets.FinancialAssetHistory", b =>
                {
                    b.Navigation("CryptoHoldingHistory");
                });

            modelBuilder.Entity("OmniFi_API.Models.Banks.Bank", b =>
                {
                    b.Navigation("AssetPlatform");

                    b.Navigation("BankAccounts");

                    b.Navigation("BankCredentials");
                });

            modelBuilder.Entity("OmniFi_API.Models.Banks.BankAccount", b =>
                {
                    b.Navigation("BankCredential");
                });

            modelBuilder.Entity("OmniFi_API.Models.Banks.BankCredential", b =>
                {
                    b.Navigation("AesIV");

                    b.Navigation("AesKey");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoApiCredential", b =>
                {
                    b.Navigation("AesIV");

                    b.Navigation("AesKey");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoCurrency", b =>
                {
                    b.Navigation("CryptoHoldings");

                    b.Navigation("CryptoHoldingsHistory");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoExchange", b =>
                {
                    b.Navigation("ApiCredentials");

                    b.Navigation("AssetPlatform");

                    b.Navigation("cryptoExchangeAccounts");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoExchangeAccount", b =>
                {
                    b.Navigation("CryptoApiCredential");
                });

            modelBuilder.Entity("OmniFi_API.Models.Cryptos.CryptoHolding", b =>
                {
                    b.Navigation("CryptoHoldingsHistory");
                });

            modelBuilder.Entity("OmniFi_API.Models.Currencies.FiatCurrency", b =>
                {
                    b.Navigation("FinancialAssets");

                    b.Navigation("FinancialAssetsHistory");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OmniFi_API.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("CryptoExchangeAccounts");

                    b.Navigation("FinancialAssets");

                    b.Navigation("FinancialAssetsHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
